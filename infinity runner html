Here’s a **short single-file HTML** for **“Infinity Runner”**—just paste into an `.html` file and run:

```html
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Infinity Runner</title>
<style>
  html,body{margin:0;height:100%;background:#0b0e17;color:#fff;font-family:system-ui,Arial}
  .wrap{display:grid;place-items:center;height:100%}
  canvas{background:linear-gradient(#0b0e17,#10182a);border:2px solid #2a3a5f;border-radius:14px;box-shadow:0 10px 30px rgba(0,0,0,.4)}
  .hud{position:fixed;top:10px;left:50%;transform:translateX(-50%);font-weight:700;letter-spacing:.5px}
  .hint{position:fixed;bottom:12px;left:50%;transform:translateX(-50%);opacity:.7;font-size:.9rem}
</style>
</head>
<body>
<div class="wrap">
  <canvas id="game" width="720" height="320"></canvas>
</div>
<div class="hud">Score: <span id="score">0</span></div>
<div class="hint">Press ⬆/Space or tap to jump • R to restart</div>

<script>
(() => {
  const c = document.getElementById('game'), x = c.getContext('2d');
  const W = c.width, H = c.height, G = 0.7;      // gravity
  let t = 0, score = 0, best = 0, speed = 4, playing = true;

  const player = { x: 80, y: H-60, w: 28, h: 28, vy: 0, onGround: true };
  let obstacles = [];
  const clouds = Array.from({length:6}, () => ({
    x: Math.random()*W, y: 30+Math.random()*80, w: 40+Math.random()*60, h: 10+Math.random()*10, s: 0.3+Math.random()*0.5
  }));

  function reset() {
    obstacles = []; score = 0; speed = 4; t = 0; playing = true;
    player.y = H-60; player.vy = 0; player.onGround = true;
    document.getElementById('score').textContent = score;
  }

  function jump() {
    if (!playing) return;
    if (player.onGround) { player.vy = -12; player.onGround = false; }
  }

  function spawnObstacle() {
    const h = 20 + Math.random()*30;
    obstacles.push({ x: W+20, y: H-32, w: 20 + Math.random()*20, h });
  }

  function update() {
    if (!playing) return draw(), requestAnimationFrame(update);

    // difficulty ramp
    t++; if (t % 300 === 0) speed += 0.4;

    // player physics
    player.vy += G;
    player.y += player.vy;
    const groundY = H-32 - player.h;
    if (player.y > groundY) { player.y = groundY; player.vy = 0; player.onGround = true; }

    // spawn obstacles
    if (obstacles.length === 0 || (obstacles.at(-1).x < W - 120 - Math.random()*200))
      spawnObstacle();

    // move & collide
    obstacles.forEach(o => o.x -= speed);
    obstacles = obstacles.filter(o => o.x + o.w > -10);
    obstacles.forEach(o => {
      if (rects(player, o)) gameOver();
      else if (!o.counted && o.x + o.w < player.x) { o.counted = true; score++; document.getElementById('score').textContent = score; }
    });

    // parallax clouds
    clouds.forEach(cl => { cl.x -= cl.s; if (cl.x + cl.w < 0) cl.x = W + Math.random()*100; });

    draw();
    requestAnimationFrame(update);
  }

  function rects(a,b){return a.x<b.x+b.w && a.x+a.w>b.x && a.y<b.y+b.h && a.y+a.h>b.y;}

  function gameOver(){
    playing = false; best = Math.max(best, score);
  }

  function drawGround() {
    x.fillStyle = '#1a2742';
    x.fillRect(0, H-32, W, 32);
    x.strokeStyle = '#2b3c65';
    for (let i=0;i<W;i+=24){ x.beginPath(); x.moveTo(i, H-32); x.lineTo(i+8, H-8); x.stroke(); }
  }

  function draw() {
    // sky
    x.clearRect(0,0,W,H);
    // stars
    for (let i=0;i<20;i++){ x.fillStyle = 'rgba(255,255,255,0.15)'; x.fillRect((i*37+t)%W, 10+(i*17)%120, 2, 2); }
    // clouds
    x.fillStyle = 'rgba(255,255,255,0.15)';
    clouds.forEach(cl => x.fillRect(cl.x, cl.y, cl.w, cl.h));

    drawGround();

    // player
    x.fillStyle = '#56e39f';
    x.fillRect(player.x, player.y, player.w, player.h);
    // player face line
    x.fillStyle = '#0b0e17'; x.fillRect(player.x+18, player.y+8, 6, 6);

    // obstacles
    x.fillStyle = '#ff6b6b';
    obstacles.forEach(o => x.fillRect(o.x, o.y - o.h, o.w, o.h));

    // texts
    if (!playing){
      x.fillStyle = '#fff'; x.font = '700 22px system-ui,Arial';
      x.textAlign = 'center';
      x.fillText('Game Over', W/2, H/2 - 6);
      x.font = '14px system-ui,Arial';
      x.fillText(`Score: ${score}   Best: ${best}   (Press R to Restart)`, W/2, H/2 + 18);
    }
  }

  // controls
  addEventListener('keydown', e => {
    if (e.code === 'Space' || e.code === 'ArrowUp') jump();
    if (e.code === 'KeyR') reset();
  }, false);
  c.addEventListener('pointerdown', jump);

  reset(); draw(); requestAnimationFrame(update);
})();
</script>
</body>
</html>
```
